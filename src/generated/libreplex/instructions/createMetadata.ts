/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateMetadata
 * @category generated
 */
export type CreateMetadataInstructionArgs = {
  name: string
  symbol: string
  imageUrl: string
  isMutable: boolean
  bump: number
}
/**
 * @category Instructions
 * @category CreateMetadata
 * @category generated
 */
export const createMetadataStruct = new beet.FixableBeetArgsStruct<
  CreateMetadataInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['name', beet.utf8String],
    ['symbol', beet.utf8String],
    ['imageUrl', beet.utf8String],
    ['isMutable', beet.bool],
    ['bump', beet.u8],
  ],
  'CreateMetadataInstructionArgs'
)
/**
 * Accounts required by the _createMetadata_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] metadata
 * @property [_writable_] mint
 * @category Instructions
 * @category CreateMetadata
 * @category generated
 */
export type CreateMetadataInstructionAccounts = {
  owner: web3.PublicKey
  metadata: web3.PublicKey
  mint: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createMetadataInstructionDiscriminator = [
  30, 35, 117, 134, 196, 139, 44, 25,
]

/**
 * Creates a _CreateMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMetadata
 * @category generated
 */
export function createCreateMetadataInstruction(
  accounts: CreateMetadataInstructionAccounts,
  args: CreateMetadataInstructionArgs,
  programId = new web3.PublicKey('L1BRc7ZYjj7t9k7E5xbdnKy3KhaY6sTcJx4gAsqxUbh')
) {
  const [data] = createMetadataStruct.serialize({
    instructionDiscriminator: createMetadataInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
