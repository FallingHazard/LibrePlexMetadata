/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { Creator, creatorBeet } from '../accounts/Creator'
import { Attribute, attributeBeet } from '../accounts/Attribute'

/**
 * @category Instructions
 * @category UpdateMetadataNft
 * @category generated
 */
export type UpdateMetadataNftInstructionArgs = {
  creators: beet.COption<Creator[]>
  attributes: beet.COption<Attribute[]>
}
/**
 * @category Instructions
 * @category UpdateMetadataNft
 * @category generated
 */
export const updateMetadataNftStruct = new beet.FixableBeetArgsStruct<
  UpdateMetadataNftInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['creators', beet.coption(beet.array(creatorBeet))],
    ['attributes', beet.coption(beet.array(attributeBeet))],
  ],
  'UpdateMetadataNftInstructionArgs'
)
/**
 * Accounts required by the _updateMetadataNft_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] metadataNft
 * @property [_writable_] metadata
 * @category Instructions
 * @category UpdateMetadataNft
 * @category generated
 */
export type UpdateMetadataNftInstructionAccounts = {
  authority: web3.PublicKey
  metadataNft: web3.PublicKey
  metadata: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateMetadataNftInstructionDiscriminator = [
  198, 166, 11, 82, 201, 133, 43, 227,
]

/**
 * Creates a _UpdateMetadataNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateMetadataNft
 * @category generated
 */
export function createUpdateMetadataNftInstruction(
  accounts: UpdateMetadataNftInstructionAccounts,
  args: UpdateMetadataNftInstructionArgs,
  programId = new web3.PublicKey('L1BRc7ZYjj7t9k7E5xbdnKy3KhaY6sTcJx4gAsqxUbh')
) {
  const [data] = updateMetadataNftStruct.serialize({
    instructionDiscriminator: updateMetadataNftInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.metadataNft,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
